@page "/"
@using System.Text.Json

@implements IDisposable

@inject HttpClient HttpClient
@inject IConfiguration Configuration
@inject PersistentComponentState ApplicationState

@rendermode InteractiveWebAssembly

<PageTitle>Home</PageTitle>

<h1>Nasa pic of the day!</h1>

@if (!string.IsNullOrEmpty(error))
{
    <h2>Error: @error</h2>
}

<InputDate @bind-Value=@selectedDate />

<button @onclick=@GetPictureForDate>
    <h5>Click for New picture!</h5>
</button>

<div>
    <h1>@title</h1>

    @if (isVideo)
    {
        <iframe src="@url" />
    }
    else
    {
        <img src="@url" />
    }

    <h6>@explanation</h6>
</div>

@code {
    private string title = "";
    private string apiKey = "";
    private string url = "";
    private string explanation = "";
    private bool isVideo = false;
    private string error = "";

    private DateTime selectedDate = DateTime.Now;
    private PersistingComponentStateSubscription persistingSubscription;

    public void Dispose()
    {
        persistingSubscription.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        if (ApplicationState.TryTakeFromJson<string>(nameof(title), out string? testTitle))
        {
            title = testTitle!;
        }

        if (ApplicationState.TryTakeFromJson<string>(nameof(url), out string? testUrl))
        {
            url = testUrl!;
        }

        if (ApplicationState.TryTakeFromJson<string>(nameof(explanation), out string? testExplanation))
        {
            explanation = testExplanation!;
        }

        if (ApplicationState.TryTakeFromJson<string>(nameof(apiKey), out string? testApiKey))
        {
            apiKey = testApiKey!;
        }
        else
        {
            apiKey = Configuration["NasaApiKey"]!;
        }

        persistingSubscription = ApplicationState.RegisterOnPersisting(() => GetDailyPicture(apiKey));

        await base.OnInitializedAsync();
    }

    private async Task GetDailyPicture(string apiKey)
    {
        await GetPictureForDate();

        ApplicationState.PersistAsJson(nameof(title), title);
        ApplicationState.PersistAsJson(nameof(url), url);
        ApplicationState.PersistAsJson(nameof(explanation), explanation);
        ApplicationState.PersistAsJson(nameof(apiKey), apiKey);
    }

    private async Task GetPictureForDate()
    {
        if (selectedDate > DateTime.Now)
        {
            error = "Cannot get data for future date";
            return;
        }

        string apiUrl = $"https://api.nasa.gov/planetary/apod?api_key={apiKey}&date={selectedDate.ToString("yyyy-MM-dd")}";

        HttpResponseMessage response = await HttpClient.GetAsync(apiUrl);
        string jsonResponse = await response.Content.ReadAsStringAsync();

        try
        {
            error = "";
            Dictionary<string, string>? responseDict = JsonSerializer.Deserialize<Dictionary<string, string>>(jsonResponse);

            if (responseDict is null)
            {
                return;
            }


            title = responseDict[nameof(title)];
            url = responseDict[nameof(url)];
            explanation = responseDict[nameof(explanation)];
            string media_type = responseDict[nameof(media_type)];

            isVideo = media_type is "video";

            StateHasChanged();
        }
        catch (Exception e)
        {
            error = "problem fetching data";
        }
    }
}